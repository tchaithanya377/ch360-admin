import React, { useState, useEffect } from "react";
import studentApiService from '../../services/studentApiService';
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faUser,
  faGraduationCap,
  faPhone,
  faEnvelope,
  faIdCard,
  faMoneyBillWave,
  faHome,
  faBus,
  faSave,
  faTimes,
  faArrowLeft,
  faArrowRight,
  faCheck
} from "@fortawesome/free-solid-svg-icons";
const EnhancedAddStudent = ({ onClose, onSuccess }) => {
  const [currentStep, setCurrentStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [studentData, setStudentData] = useState({
    name: "",
    gender: "",
    dateOfBirth: "",
    bloodGroup: "",
    email: "",
    phone: "",
    rollNo: "",
    branch: "",
    year: "",
    section: "",
    semester: "",
    admissionDate: "",
    fatherName: "",
    motherName: "",
    guardianPhone: "",
    permanentAddress: "",
    state: "",
    district: "",
    pincode: "",
    category: "",
    nationality: "",
    hostelRequired: false,
    transportRequired: false,
    feeStructure: "",
    feeAmount: "",
    feeStatus: "pending",
    status: "active",
    registrationDate: new Date().toISOString().split('T')[0]
  });

  const [errors, setErrors] = useState({});
  const [autoGenerated, setAutoGenerated] = useState(false);

  // Auto-generate roll number and email
  useEffect(() => {
    if (studentData.branch && studentData.year && studentData.section && !autoGenerated) {
      generateRollNumber();
      generateEmail();
      setAutoGenerated(true);
    }
  }, [studentData.branch, studentData.year, studentData.section]);

  const generateRollNumber = async () => {
    try {
      const year = new Date().getFullYear().toString().slice(-2);
      const branchCode = getBranchCode(studentData.branch);
      const yearCode = studentData.year;
      const sectionCode = studentData.section;
      
      const rollQuery = query(
        collectionGroup(db, "students"),
        where("branch", "==", studentData.branch),
        where("year", "==", studentData.year),
        where("section", "==", studentData.section),
        orderBy("rollNo", "desc"),
        limit(1)
      );
      
      const snapshot = await getDocs(rollQuery);
      let nextNumber = 1;
      
      if (!snapshot.empty) {
        const lastRollNo = snapshot.docs[0].data().rollNo;
        const lastNumber = parseInt(lastRollNo.slice(-3));
        nextNumber = lastNumber + 1;
      }
      
      const rollNo = `${year}${branchCode}${yearCode}${sectionCode}${nextNumber.toString().padStart(3, '0')}`;
      setStudentData(prev => ({ ...prev, rollNo }));
    } catch (error) {
      console.error("Error generating roll number:", error);
    }
  };

  const generateEmail = () => {
    if (studentData.rollNo && studentData.name) {
      const name = studentData.name.toLowerCase().replace(/\s+/g, '.');
      const email = `${name}.${studentData.rollNo}@university.edu`;
      setStudentData(prev => ({ ...prev, email }));
    }
  };

  const getBranchCode = (branch) => {
    const codes = {
      "Computer Science": "CS",
      "Electrical Engineering": "EE",
      "Mechanical Engineering": "ME",
      "Civil Engineering": "CE",
      "Information Technology": "IT",
      "Electronics": "EC"
    };
    return codes[branch] || "XX";
  };

  const validateStep = (step) => {
    const newErrors = {};
    
    switch (step) {
      case 1:
        if (!studentData.name) newErrors.name = "Name is required";
        if (!studentData.gender) newErrors.gender = "Gender is required";
        if (!studentData.dateOfBirth) newErrors.dateOfBirth = "Date of birth is required";
        if (!studentData.phone) newErrors.phone = "Phone number is required";
        break;
      case 2:
        if (!studentData.branch) newErrors.branch = "Branch is required";
        if (!studentData.year) newErrors.year = "Year is required";
        if (!studentData.section) newErrors.section = "Section is required";
        if (!studentData.admissionDate) newErrors.admissionDate = "Admission date is required";
        break;
      case 3:
        if (!studentData.fatherName) newErrors.fatherName = "Father's name is required";
        if (!studentData.motherName) newErrors.motherName = "Mother's name is required";
        if (!studentData.guardianPhone) newErrors.guardianPhone = "Guardian phone is required";
        break;
      case 4:
        if (!studentData.permanentAddress) newErrors.permanentAddress = "Address is required";
        if (!studentData.state) newErrors.state = "State is required";
        if (!studentData.district) newErrors.district = "District is required";
        if (!studentData.pincode) newErrors.pincode = "Pincode is required";
        break;
      case 5:
        if (!studentData.category) newErrors.category = "Category is required";
        if (!studentData.nationality) newErrors.nationality = "Nationality is required";
        break;
      case 6:
        // Optional fields - no validation required
        break;
      case 7:
        if (!studentData.feeStructure) newErrors.feeStructure = "Fee structure is required";
        if (!studentData.feeAmount) newErrors.feeAmount = "Fee amount is required";
        break;
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const nextStep = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => Math.min(prev + 1, 7));
    }
  };

  const prevStep = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1));
  };

  const handleSubmit = async () => {
    if (!validateStep(currentStep)) return;
    
    setLoading(true);
    try {
      const studentId = `STU${Date.now()}`;
      const finalData = { ...studentData, studentId };
      
      const path = `students/${finalData.year}/${finalData.section}`;
      const docRef = await addDoc(collection(db, path), finalData);
      
      alert("Student added successfully!");
      onSuccess && onSuccess(docRef.id);
      onClose();
    } catch (error) {
      console.error("Error adding student:", error);
      alert("Failed to add student. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field, value) => {
    setStudentData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: "" }));
    }
  };

  const renderStep1 = () => (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold text-gray-800 mb-4">Basic Information</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Full Name *</label>
          <input
            type="text"
            value={studentData.name}
            onChange={(e) => handleInputChange("name", e.target.value)}
            className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
              errors.name ? "border-red-500" : "border-gray-300"
            }`}
          />
          {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Gender *</label>
          <select
            value={studentData.gender}
            onChange={(e) => handleInputChange("gender", e.target.value)}
            className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
              errors.gender ? "border-red-500" : "border-gray-300"
            }`}
          >
            <option value="">Select Gender</option>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
            <option value="Other">Other</option>
          </select>
          {errors.gender && <p className="text-red-500 text-sm mt-1">{errors.gender}</p>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Date of Birth *</label>
          <input
            type="date"
            value={studentData.dateOfBirth}
            onChange={(e) => handleInputChange("dateOfBirth", e.target.value)}
            className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
              errors.dateOfBirth ? "border-red-500" : "border-gray-300"
            }`}
          />
          {errors.dateOfBirth && <p className="text-red-500 text-sm mt-1">{errors.dateOfBirth}</p>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Blood Group</label>
          <select
            value={studentData.bloodGroup}
            onChange={(e) => handleInputChange("bloodGroup", e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
          >
            <option value="">Select Blood Group</option>
            <option value="A+">A+</option>
            <option value="A-">A-</option>
            <option value="B+">B+</option>
            <option value="B-">B-</option>
            <option value="AB+">AB+</option>
            <option value="AB-">AB-</option>
            <option value="O+">O+</option>
            <option value="O-">O-</option>
          </select>
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Phone Number *</label>
          <input
            type="tel"
            value={studentData.phone}
            onChange={(e) => handleInputChange("phone", e.target.value)}
            className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
              errors.phone ? "border-red-500" : "border-gray-300"
            }`}
          />
          {errors.phone && <p className="text-red-500 text-sm mt-1">{errors.phone}</p>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Email (Auto-generated)</label>
          <input
            type="email"
            value={studentData.email}
            readOnly
            className="w-full p-3 border border-gray-300 rounded-lg bg-gray-50"
          />
        </div>
      </div>
    </div>
  );

  const renderStep2 = () => (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold text-gray-800 mb-4">Academic Information</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Branch *</label>
          <select
            value={studentData.branch}
            onChange={(e) => handleInputChange("branch", e.target.value)}
            className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
              errors.branch ? "border-red-500" : "border-gray-300"
            }`}
          >
            <option value="">Select Branch</option>
            <option value="Computer Science">Computer Science</option>
            <option value="Electrical Engineering">Electrical Engineering</option>
            <option value="Mechanical Engineering">Mechanical Engineering</option>
            <option value="Civil Engineering">Civil Engineering</option>
            <option value="Information Technology">Information Technology</option>
            <option value="Electronics">Electronics</option>
          </select>
          {errors.branch && <p className="text-red-500 text-sm mt-1">{errors.branch}</p>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Year *</label>
          <select
            value={studentData.year}
            onChange={(e) => handleInputChange("year", e.target.value)}
            className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
              errors.year ? "border-red-500" : "border-gray-300"
            }`}
          >
            <option value="">Select Year</option>
            <option value="I">1st Year</option>
            <option value="II">2nd Year</option>
            <option value="III">3rd Year</option>
            <option value="IV">4th Year</option>
          </select>
          {errors.year && <p className="text-red-500 text-sm mt-1">{errors.year}</p>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Section *</label>
          <select
            value={studentData.section}
            onChange={(e) => handleInputChange("section", e.target.value)}
            className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
              errors.section ? "border-red-500" : "border-gray-300"
            }`}
          >
            <option value="">Select Section</option>
            <option value="A">Section A</option>
            <option value="B">Section B</option>
            <option value="C">Section C</option>
          </select>
          {errors.section && <p className="text-red-500 text-sm mt-1">{errors.section}</p>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Roll Number (Auto-generated)</label>
          <input
            type="text"
            value={studentData.rollNo}
            readOnly
            className="w-full p-3 border border-gray-300 rounded-lg bg-gray-50 font-mono"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Semester</label>
          <select
            value={studentData.semester}
            onChange={(e) => handleInputChange("semester", e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
          >
            <option value="">Select Semester</option>
            <option value="1">Semester 1</option>
            <option value="2">Semester 2</option>
            <option value="3">Semester 3</option>
            <option value="4">Semester 4</option>
            <option value="5">Semester 5</option>
            <option value="6">Semester 6</option>
            <option value="7">Semester 7</option>
            <option value="8">Semester 8</option>
          </select>
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Admission Date *</label>
          <input
            type="date"
            value={studentData.admissionDate}
            onChange={(e) => handleInputChange("admissionDate", e.target.value)}
            className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
              errors.admissionDate ? "border-red-500" : "border-gray-300"
            }`}
          />
          {errors.admissionDate && <p className="text-red-500 text-sm mt-1">{errors.admissionDate}</p>}
        </div>
      </div>
    </div>
  );

  const renderStep3 = () => (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold text-gray-800 mb-4">Family Information</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Father's Name *</label>
          <input
            type="text"
            value={studentData.fatherName}
            onChange={(e) => handleInputChange("fatherName", e.target.value)}
            className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
              errors.fatherName ? "border-red-500" : "border-gray-300"
            }`}
          />
          {errors.fatherName && <p className="text-red-500 text-sm mt-1">{errors.fatherName}</p>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Mother's Name *</label>
          <input
            type="text"
            value={studentData.motherName}
            onChange={(e) => handleInputChange("motherName", e.target.value)}
            className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
              errors.motherName ? "border-red-500" : "border-gray-300"
            }`}
          />
          {errors.motherName && <p className="text-red-500 text-sm mt-1">{errors.motherName}</p>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Guardian Name</label>
          <input
            type="text"
            value={studentData.guardianName}
            onChange={(e) => handleInputChange("guardianName", e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Guardian Phone *</label>
          <input
            type="tel"
            value={studentData.guardianPhone}
            onChange={(e) => handleInputChange("guardianPhone", e.target.value)}
            className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
              errors.guardianPhone ? "border-red-500" : "border-gray-300"
            }`}
          />
          {errors.guardianPhone && <p className="text-red-500 text-sm mt-1">{errors.guardianPhone}</p>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Parent Email</label>
          <input
            type="email"
            value={studentData.parentEmail}
            onChange={(e) => handleInputChange("parentEmail", e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Family Income</label>
          <input
            type="number"
            value={studentData.familyIncome}
            onChange={(e) => handleInputChange("familyIncome", e.target.value)}
            placeholder="Annual income in INR"
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
          />
        </div>
      </div>
    </div>
  );

  const renderStep4 = () => (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold text-gray-800 mb-4">Address Information</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="md:col-span-2">
          <label className="block text-sm font-medium text-gray-700 mb-2">Permanent Address *</label>
          <textarea
            value={studentData.permanentAddress}
            onChange={(e) => handleInputChange("permanentAddress", e.target.value)}
            rows="3"
            className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
              errors.permanentAddress ? "border-red-500" : "border-gray-300"
            }`}
          />
          {errors.permanentAddress && <p className="text-red-500 text-sm mt-1">{errors.permanentAddress}</p>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">State *</label>
          <input
            type="text"
            value={studentData.state}
            onChange={(e) => handleInputChange("state", e.target.value)}
            className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
              errors.state ? "border-red-500" : "border-gray-300"
            }`}
          />
          {errors.state && <p className="text-red-500 text-sm mt-1">{errors.state}</p>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">District *</label>
          <input
            type="text"
            value={studentData.district}
            onChange={(e) => handleInputChange("district", e.target.value)}
            className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
              errors.district ? "border-red-500" : "border-gray-300"
            }`}
          />
          {errors.district && <p className="text-red-500 text-sm mt-1">{errors.district}</p>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Pincode *</label>
          <input
            type="text"
            value={studentData.pincode}
            onChange={(e) => handleInputChange("pincode", e.target.value)}
            className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
              errors.pincode ? "border-red-500" : "border-gray-300"
            }`}
          />
          {errors.pincode && <p className="text-red-500 text-sm mt-1">{errors.pincode}</p>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Emergency Contact</label>
          <input
            type="text"
            value={studentData.emergencyContact}
            onChange={(e) => handleInputChange("emergencyContact", e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Emergency Phone</label>
          <input
            type="tel"
            value={studentData.emergencyPhone}
            onChange={(e) => handleInputChange("emergencyPhone", e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
          />
        </div>
      </div>
    </div>
  );

  const renderStep5 = () => (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold text-gray-800 mb-4">Additional Information</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Category *</label>
          <select
            value={studentData.category}
            onChange={(e) => handleInputChange("category", e.target.value)}
            className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
              errors.category ? "border-red-500" : "border-gray-300"
            }`}
          >
            <option value="">Select Category</option>
            <option value="General">General</option>
            <option value="OBC">OBC</option>
            <option value="SC">SC</option>
            <option value="ST">ST</option>
            <option value="EWS">EWS</option>
          </select>
          {errors.category && <p className="text-red-500 text-sm mt-1">{errors.category}</p>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Religion</label>
          <input
            type="text"
            value={studentData.religion}
            onChange={(e) => handleInputChange("religion", e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Nationality *</label>
          <input
            type="text"
            value={studentData.nationality}
            onChange={(e) => handleInputChange("nationality", e.target.value)}
            className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
              errors.nationality ? "border-red-500" : "border-gray-300"
            }`}
          />
          {errors.nationality && <p className="text-red-500 text-sm mt-1">{errors.nationality}</p>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Quota</label>
          <select
            value={studentData.quota}
            onChange={(e) => handleInputChange("quota", e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
          >
            <option value="">Select Quota</option>
            <option value="None">None</option>
            <option value="Sports">Sports</option>
            <option value="NCC">NCC</option>
            <option value="NSS">NSS</option>
            <option value="PH">Physically Handicapped</option>
          </select>
        </div>
        
        <div className="md:col-span-2">
          <label className="block text-sm font-medium text-gray-700 mb-2">Achievements</label>
          <textarea
            value={studentData.achievements}
            onChange={(e) => handleInputChange("achievements", e.target.value)}
            rows="3"
            placeholder="Academic achievements, sports, cultural activities, etc."
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
          />
        </div>
        
        <div className="md:col-span-2">
          <label className="block text-sm font-medium text-gray-700 mb-2">Medical Conditions</label>
          <textarea
            value={studentData.medicalConditions}
            onChange={(e) => handleInputChange("medicalConditions", e.target.value)}
            rows="3"
            placeholder="Any medical conditions, allergies, or special needs"
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
          />
        </div>
      </div>
    </div>
  );

  const renderStep6 = () => (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold text-gray-800 mb-4">Preferences & Requirements</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="md:col-span-2">
          <div className="flex items-center space-x-4">
            <label className="flex items-center">
              <input
                type="checkbox"
                checked={studentData.hostelRequired}
                onChange={(e) => handleInputChange("hostelRequired", e.target.checked)}
                className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              />
              <span className="text-sm font-medium text-gray-700">Hostel Accommodation Required</span>
            </label>
          </div>
        </div>
        
        <div className="md:col-span-2">
          <div className="flex items-center space-x-4">
            <label className="flex items-center">
              <input
                type="checkbox"
                checked={studentData.transportRequired}
                onChange={(e) => handleInputChange("transportRequired", e.target.checked)}
                className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              />
              <span className="text-sm font-medium text-gray-700">Transport Facility Required</span>
            </label>
          </div>
        </div>
        
        <div className="md:col-span-2">
          <label className="block text-sm font-medium text-gray-700 mb-2">Special Needs</label>
          <textarea
            value={studentData.specialNeeds}
            onChange={(e) => handleInputChange("specialNeeds", e.target.value)}
            rows="3"
            placeholder="Any special requirements or accommodations needed"
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
          />
        </div>
      </div>
    </div>
  );

  const renderStep7 = () => (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold text-gray-800 mb-4">Fee Information</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Fee Structure *</label>
          <select
            value={studentData.feeStructure}
            onChange={(e) => handleInputChange("feeStructure", e.target.value)}
            className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
              errors.feeStructure ? "border-red-500" : "border-gray-300"
            }`}
          >
            <option value="">Select Fee Structure</option>
            <option value="Regular">Regular</option>
            <option value="Merit">Merit</option>
            <option value="Scholarship">Scholarship</option>
            <option value="International">International</option>
          </select>
          {errors.feeStructure && <p className="text-red-500 text-sm mt-1">{errors.feeStructure}</p>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Total Fee Amount *</label>
          <input
            type="number"
            value={studentData.feeAmount}
            onChange={(e) => handleInputChange("feeAmount", e.target.value)}
            placeholder="Amount in INR"
            className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
              errors.feeAmount ? "border-red-500" : "border-gray-300"
            }`}
          />
          {errors.feeAmount && <p className="text-red-500 text-sm mt-1">{errors.feeAmount}</p>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Paid Amount</label>
          <input
            type="number"
            value={studentData.paidAmount}
            onChange={(e) => handleInputChange("paidAmount", e.target.value)}
            placeholder="Amount paid in INR"
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Fee Status</label>
          <select
            value={studentData.feeStatus}
            onChange={(e) => handleInputChange("feeStatus", e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
          >
            <option value="pending">Pending</option>
            <option value="partial">Partial</option>
            <option value="paid">Paid</option>
            <option value="overdue">Overdue</option>
          </select>
        </div>
      </div>
      
      {/* Summary */}
      <div className="bg-gray-50 rounded-lg p-4 mt-6">
        <h4 className="font-semibold text-gray-800 mb-3">Registration Summary</h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
          <div>
            <p><strong>Name:</strong> {studentData.name}</p>
            <p><strong>Roll No:</strong> {studentData.rollNo}</p>
            <p><strong>Branch:</strong> {studentData.branch}</p>
            <p><strong>Year:</strong> {studentData.year}</p>
          </div>
          <div>
            <p><strong>Section:</strong> {studentData.section}</p>
            <p><strong>Email:</strong> {studentData.email}</p>
            <p><strong>Phone:</strong> {studentData.phone}</p>
            <p><strong>Status:</strong> {studentData.status}</p>
          </div>
        </div>
      </div>
    </div>
  );

  const renderStep = () => {
    switch (currentStep) {
      case 1: return renderStep1();
      case 2: return renderStep2();
      case 3: return renderStep3();
      case 4: return renderStep4();
      case 5: return renderStep5();
      case 6: return renderStep6();
      case 7: return renderStep7();
      default: return renderStep1();
    }
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50 p-4">
      <div className="bg-white rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="sticky top-0 bg-white border-b border-gray-200 p-6">
          <div className="flex justify-between items-center">
            <div>
              <h2 className="text-2xl font-bold text-gray-800">Add New Student</h2>
              <p className="text-gray-600">Step {currentStep} of 7</p>
            </div>
            <button
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700 p-2 rounded-lg hover:bg-gray-100 transition-colors"
            >
              <FontAwesomeIcon icon={faTimes} />
            </button>
          </div>
          
          {/* Progress Bar */}
          <div className="mt-4">
            <div className="flex justify-between mb-2">
              {[1, 2, 3, 4, 5, 6, 7].map((step) => (
                <div
                  key={step}
                  className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                    step <= currentStep
                      ? "bg-blue-500 text-white"
                      : "bg-gray-200 text-gray-600"
                  }`}
                >
                  {step < currentStep ? (
                    <FontAwesomeIcon icon={faCheck} className="text-xs" />
                  ) : (
                    step
                  )}
                </div>
              ))}
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div
                className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                style={{ width: `${(currentStep / 7) * 100}%` }}
              ></div>
            </div>
          </div>
        </div>
        
        {/* Content */}
        <div className="p-6">
          {renderStep()}
        </div>
        
        {/* Footer */}
        <div className="sticky bottom-0 bg-white border-t border-gray-200 p-6">
          <div className="flex justify-between">
            <button
              onClick={prevStep}
              disabled={currentStep === 1}
              className="flex items-center space-x-2 px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <FontAwesomeIcon icon={faArrowLeft} />
              <span>Previous</span>
            </button>
            
            <div className="flex space-x-3">
              <button
                onClick={onClose}
                className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                Cancel
              </button>
              
              {currentStep === 7 ? (
                <button
                  onClick={handleSubmit}
                  disabled={loading}
                  className="flex items-center space-x-2 px-6 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {loading ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                      <span>Adding...</span>
                    </>
                  ) : (
                    <>
                      <FontAwesomeIcon icon={faSave} />
                      <span>Add Student</span>
                    </>
                  )}
                </button>
              ) : (
                <button
                  onClick={nextStep}
                  className="flex items-center space-x-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
                >
                  <span>Next</span>
                  <FontAwesomeIcon icon={faArrowRight} />
                </button>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EnhancedAddStudent;
